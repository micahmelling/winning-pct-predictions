"""
Generates a dataframe suitable for predictive modeling from the raw data generated by data/generate_raw_data.py.

To note, this script is expected to be run from the command line from the directory root:

$ python3 data/generate_modeling_data.py
"""
import os
import warnings

import joblib
import numpy as np
import pandas as pd

from data.config import CLEAN_DATA_PATH, RAW_DATA_PATH
from helpers.helpers import make_directories_if_not_exists

warnings.filterwarnings('ignore')


def create_modeling_df(df: pd.DataFrame, data_directory: str) -> None:
    """
    The function starts by calculating the daily winning percentage per team per season. It then iterates over every
    team's season to do the following:

    1) defines the target for every row as the team's final winning percentage
    2) calculates a feature that represents the percent of season played
    3) applying rounding and renaming where needed

    The final dataframe has the following columns:
    'target',
    'winning_percentage',
    'pct_of_season_played',
    'year',
    'team'

    The columns winning_percentage and pct_of_season_played will be the predictors. The columns year and team will
    get dropped in the modeling pipeline

    :param df: dataframe of raw data
    :param data_directory: directory in which to save the clean data
    """
    df = df[['Tm', 'W-L', 'year']]
    df = df.dropna()
    df[['w', 'l']] = df['W-L'].str.split('-', expand=True)
    df['w'] = df['w'].astype(int)
    df['l'] = df['l'].astype(int)
    df['winning_percentage'] = df['w'] / (df['w'] + df['l'])

    teams = list(df['Tm'].unique())
    df_list = []
    for team in teams:
        team_df = df.loc[df['Tm'] == team]
        team_years = list(df['year'].unique())
        for year in team_years:
            team_year_df = team_df.loc[team_df['year'] == year]
            if len(team_year_df):
                team_year_df['target'] = team_year_df['winning_percentage'].iloc[-1]
                total_games = len(team_year_df)
                team_year_df['pct_of_season_played'] = (np.arange(len(team_year_df)) + 1) / total_games
                team_year_df = team_year_df.drop(team_year_df.tail(1).index)
                team_year_df = team_year_df[['target', 'winning_percentage', 'pct_of_season_played', 'year', 'Tm']]
                round_columns = ['target', 'winning_percentage', 'pct_of_season_played']
                for column in round_columns:
                    team_year_df[column] = team_year_df[column].round(3)
                df_list.append(team_year_df)

    main_df = pd.concat(df_list, axis=0)
    main_df = main_df.rename(columns={'Tm': 'team'})
    joblib.dump(main_df, os.path.join(data_directory, 'modeling.pkl'))


def main(raw_data_path: str, clean_data_path: str) -> None:
    """
    Main execution script to generate raw data.

    :param raw_data_path: path where the raw data lives
    :param clean_data_path: path in which to save the cleaned modeling dataframe
    """
    clean_directory = os.path.dirname(os.path.realpath(clean_data_path))
    make_directories_if_not_exists([clean_directory])
    raw_df = joblib.load(raw_data_path)
    create_modeling_df(
        df=raw_df,
        data_directory=clean_data_path
    )


if __name__ == "__main__":
    main(
        raw_data_path=RAW_DATA_PATH,
        clean_data_path=CLEAN_DATA_PATH
    )
